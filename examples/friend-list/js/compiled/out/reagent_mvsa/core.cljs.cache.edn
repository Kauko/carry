;; Analyzed by ClojureScript 1.7.228
{:use-macros {reaction reagent.ratom}, :excludes #{}, :name reagent-mvsa.core, :imports nil, :requires {r reagent.core, reagent.core reagent.core}, :uses nil, :defs {-make-readonly! {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/reagent-mvsa/src/reagent_mvsa/core.cljs", :line 5, :column 7, :end-line 5, :end-column 22, :arglists (quote ([a])), :doc "Prohibits using swap! and reset! on the specified atom. Returns the same atom."}, :name reagent-mvsa.core/-make-readonly!, :variadic false, :file "/Users/yuri/Dropbox/dev/reagent-mvsa/src/reagent_mvsa/core.cljs", :end-column 22, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a])), :doc "Prohibits using swap! and reset! on the specified atom. Returns the same atom."}, -force-reset! {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/reagent-mvsa/src/reagent_mvsa/core.cljs", :line 17, :column 7, :end-line 17, :end-column 20, :arglists (quote ([readonly-atom new-value])), :doc "Bypasses write protection of the specified readonly atom."}, :name reagent-mvsa.core/-force-reset!, :variadic false, :file "/Users/yuri/Dropbox/dev/reagent-mvsa/src/reagent_mvsa/core.cljs", :end-column 20, :method-params ([readonly-atom new-value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 2, :fn-var true, :arglists (quote ([readonly-atom new-value])), :doc "Bypasses write protection of the specified readonly atom."}, app {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/reagent-mvsa/src/reagent_mvsa/core.cljs", :line 22, :column 7, :end-line 22, :end-column 10, :arglists (quote ([{:keys [initial-model control reconcile], :as _spec}])), :doc "Constructs an app from a spec map with keys:\n  :initial-model - Initial model value, must be a map.\n\n  :control - Function of args: [model-readonly-ratom signal dispatch-signal dispatch-action].\n  It performs side effects, can dispatch actions and new signals.\n  By convention, it must be able to handle :on-start and :on-stop signals in order to be wrappable by middleware.\n  Model ratom is useful for reading actual model values in async code and to subscribe to model changes.\n  Functions dispatch-signal and dispatch-action always return nil.\n\n  :reconcile - Pure function of args: [model-value action]. Given an action, it must return the new model value.\n\n  Returned app is a map with keys:\n  :model - A readonly model ratom.\n\n  :dispatch-signal - Function with a single arg: a signal to be sent to an app. Returns nil.\n\n  Data flow:\n  -dispatch-signal-> (control) -dispatch-action-> (reconcile)"}, :name reagent-mvsa.core/app, :variadic false, :file "/Users/yuri/Dropbox/dev/reagent-mvsa/src/reagent_mvsa/core.cljs", :end-column 10, :method-params ([p__92140]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [initial-model control reconcile], :as _spec}])), :doc "Constructs an app from a spec map with keys:\n  :initial-model - Initial model value, must be a map.\n\n  :control - Function of args: [model-readonly-ratom signal dispatch-signal dispatch-action].\n  It performs side effects, can dispatch actions and new signals.\n  By convention, it must be able to handle :on-start and :on-stop signals in order to be wrappable by middleware.\n  Model ratom is useful for reading actual model values in async code and to subscribe to model changes.\n  Functions dispatch-signal and dispatch-action always return nil.\n\n  :reconcile - Pure function of args: [model-value action]. Given an action, it must return the new model value.\n\n  Returned app is a map with keys:\n  :model - A readonly model ratom.\n\n  :dispatch-signal - Function with a single arg: a signal to be sent to an app. Returns nil.\n\n  Data flow:\n  -dispatch-signal-> (control) -dispatch-action-> (reconcile)"}, connect-ui {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/reagent-mvsa/src/reagent_mvsa/core.cljs", :line 49, :column 7, :end-line 49, :end-column 17, :arglists (quote ([{:keys [model dispatch-signal], :as _app} view-model view])), :doc "Arguments:\n  app - the app for which UI should be created\n  view-model - function which, given a model ratom, returns reactions; returned value will be passed to a view:\n  view - Reagent component function with args: [view-model-return-value dispatch-signal]\n\n  Note that view-model function will be called only once.\n\n  Returns a pair of: view-model value (mostly for testing/debugging) and argless component to be rendered by Reagent."}, :name reagent-mvsa.core/connect-ui, :variadic false, :file "/Users/yuri/Dropbox/dev/reagent-mvsa/src/reagent_mvsa/core.cljs", :end-column 17, :method-params ([p__92145 view-model view]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{:keys [model dispatch-signal], :as _app} view-model view])), :doc "Arguments:\n  app - the app for which UI should be created\n  view-model - function which, given a model ratom, returns reactions; returned value will be passed to a view:\n  view - Reagent component function with args: [view-model-return-value dispatch-signal]\n\n  Note that view-model function will be called only once.\n\n  Returns a pair of: view-model value (mostly for testing/debugging) and argless component to be rendered by Reagent."}, track-keys {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/reagent-mvsa/src/reagent_mvsa/core.cljs", :line 64, :column 7, :end-line 64, :end-column 17, :arglists (quote ([map-ratom keyseq])), :doc "Returns a map containing reactions to map entries specified by keys."}, :name reagent-mvsa.core/track-keys, :variadic false, :file "/Users/yuri/Dropbox/dev/reagent-mvsa/src/reagent_mvsa/core.cljs", :end-column 17, :method-params ([map-ratom keyseq]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 2, :fn-var true, :arglists (quote ([map-ratom keyseq])), :doc "Returns a map containing reactions to map entries specified by keys."}}, :require-macros {reagent.ratom reagent.ratom, r reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{reconcile fn? view model :initial-model map? initial-model :dispatch-signal :control :reagent-mvsa.core/force-reset? dispatch-signal :reconcile control view-model :model}, :order [:reagent-mvsa.core/force-reset? :initial-model :control :reconcile map? initial-model fn? control reconcile :model :dispatch-signal model dispatch-signal view-model view]}, :doc nil}