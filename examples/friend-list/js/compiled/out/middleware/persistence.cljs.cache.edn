;; Analyzed by ClojureScript 1.7.228
{:use-macros {match cljs.core.match, run! reagent.ratom}, :excludes #{}, :name middleware.persistence, :imports nil, :requires {cljs.core.match cljs.core.match}, :uses nil, :defs {-save {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/persistence.cljs", :line 5, :column 7, :end-line 5, :end-column 12, :arglists (quote ([storage key blacklist model]))}, :name middleware.persistence/-save, :variadic false, :file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/persistence.cljs", :end-column 12, :method-params ([storage key blacklist model]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 4, :fn-var true, :arglists (quote ([storage key blacklist model]))}, -wrap-control {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/persistence.cljs", :line 10, :column 7, :end-line 10, :end-column 20, :arglists (quote ([app-control storage key blacklist load-wrapper]))}, :name middleware.persistence/-wrap-control, :variadic false, :file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/persistence.cljs", :end-column 20, :method-params ([app-control storage key blacklist load-wrapper]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 5, :fn-var true, :arglists (quote ([app-control storage key blacklist load-wrapper]))}, -wrap-reconcile {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/persistence.cljs", :line 35, :column 7, :end-line 35, :end-column 22, :arglists (quote ([app-reconcile key blacklist]))}, :name middleware.persistence/-wrap-reconcile, :variadic false, :file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/persistence.cljs", :end-column 22, :method-params ([app-reconcile key blacklist]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 3, :fn-var true, :arglists (quote ([app-reconcile key blacklist]))}, add {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/persistence.cljs", :line 47, :column 7, :end-line 47, :end-column 10, :arglists (quote ([spec storage key] [spec storage key {:keys [blacklist load-wrapper], :or {blacklist #{}, load-wrapper identity}, :as _options}])), :doc "On start middleware will load the model from storage.\n  Saves model into storage on every change.\n  Several middlewares can safely wrap the same spec as long as they use different storage keys.\n\n  Storage is expected to be a transient map.\n  If this middleware is applied to spec several times then all keys must differ; otherwise, behavior is undefined.\n  Optional :blacklist set should contain model keys which will not be saved and loaded.\n  Optional :load-wrapper allows decorating model update function (e.g. it's possible to cancel loading based on loaded data).", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([spec storage key] [spec storage key {:keys [blacklist load-wrapper], :or {blacklist #{}, load-wrapper identity}, :as _options}]), :arglists ([spec storage key] [spec storage key {:keys [blacklist load-wrapper], :or {blacklist #{}, load-wrapper identity}, :as _options}]), :arglists-meta (nil nil)}}, :name middleware.persistence/add, :variadic false, :file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/persistence.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([spec storage key] [spec storage key {:keys [blacklist load-wrapper], :or {blacklist #{}, load-wrapper identity}, :as _options}]), :arglists ([spec storage key] [spec storage key {:keys [blacklist load-wrapper], :or {blacklist #{}, load-wrapper identity}, :as _options}]), :arglists-meta (nil nil)}, :method-params ([spec storage key] [spec storage key {:keys [blacklist load-wrapper], :or {blacklist #{}, load-wrapper identity}, :as _options}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 4, :fn-var true, :arglists ([spec storage key] [spec storage key {:keys [blacklist load-wrapper], :or {blacklist #{}, load-wrapper identity}, :as _options}]), :doc "On start middleware will load the model from storage.\n  Saves model into storage on every change.\n  Several middlewares can safely wrap the same spec as long as they use different storage keys.\n\n  Storage is expected to be a transient map.\n  If this middleware is applied to spec several times then all keys must differ; otherwise, behavior is undefined.\n  Optional :blacklist set should contain model keys which will not be saved and loaded.\n  Optional :load-wrapper allows decorating model update function (e.g. it's possible to cancel loading based on loaded data)."}}, :require-macros {reagent.ratom reagent.ratom, cljs.core.match cljs.core.match}, :cljs.analyzer/constants {:seen #{:else set? :middleware.persistence/on-load-from-storage :load-wrapper :blacklist :not-found :control :auto-run blacklist :reconcile :middleware.persistence/load-from-storage :on-start}, :order [:middleware.persistence/on-load-from-storage :else :middleware.persistence/load-from-storage :on-start :not-found :auto-run :blacklist :load-wrapper set? blacklist :control :reconcile]}, :doc nil}