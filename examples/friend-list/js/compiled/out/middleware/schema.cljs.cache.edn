;; Analyzed by ClojureScript 1.7.228
{:use-macros {run! reagent.ratom}, :excludes #{}, :name middleware.schema, :imports nil, :requires {s schema.core, schema.core schema.core}, :uses nil, :defs {add {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/schema.cljs", :line 5, :column 7, :end-line 5, :end-column 10, :arglists (quote ([spec schema])), :doc "Middleware will validate the model on every change using the specified schema.\n  Throws an exception if validation fails.\n  Add it as close to spec as possible in order to not propagate the invalid model to other middlewares.\n  Starts validating only after :on-start signal."}, :name middleware.schema/add, :variadic false, :file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/schema.cljs", :end-column 10, :method-params ([spec schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec schema])), :doc "Middleware will validate the model on every change using the specified schema.\n  Throws an exception if validation fails.\n  Add it as close to spec as possible in order to not propagate the invalid model to other middlewares.\n  Starts validating only after :on-start signal."}}, :require-macros {reagent.ratom reagent.ratom, s schema.core, schema.core schema.core}, :cljs.analyzer/constants {:seen #{:control :auto-run :on-start}, :order [:control :on-start :auto-run]}, :doc nil}