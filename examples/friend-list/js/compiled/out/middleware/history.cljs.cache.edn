;; Analyzed by ClojureScript 1.7.228
{:use-macros {match cljs.core.match}, :excludes #{}, :name middleware.history, :imports {Html5History goog.history.Html5History, History goog.History}, :requires {cljs.core.match cljs.core.match, goog.events goog.events, EventType goog.history.EventType, goog.history.EventType goog.history.EventType, clojure.string clojure.string, clojure.set clojure.set, Html5History goog.history.Html5History, History goog.History}, :uses nil, :defs {map->-History {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :line 30, :column 12, :end-line 30, :end-column 20, :internal-ctor true, :factory :map, :arglists (quote ([G__92178]))}, :name middleware.history/map->-History, :variadic false, :file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :end-column 20, :method-params ([G__92178]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__92178]))}, -wrap-reconcile {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :line 134, :column 7, :end-line 134, :end-column 22, :arglists (quote ([app-reconcile])), :doc "Updates the token."}, :name middleware.history/-wrap-reconcile, :variadic false, :file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :end-column 22, :method-params ([app-reconcile]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 134, :end-line 134, :max-fixed-arity 1, :fn-var true, :arglists (quote ([app-reconcile])), :doc "Updates the token."}, new-hash-history {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :line 67, :column 7, :end-line 67, :end-column 23, :arglists (quote ([])), :doc "For history management using hashes based on onhashchange event. Will not correctly work in Opera Mini: http://caniuse.com/#search=hash"}, :name middleware.history/new-hash-history, :variadic false, :file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "For history management using hashes based on onhashchange event. Will not correctly work in Opera Mini: http://caniuse.com/#search=hash"}, add {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :line 147, :column 7, :end-line 147, :end-column 10, :arglists (quote ([spec history])), :doc "Applies middleware which allows app model always be in sync with current history.\n\n  After start it begins catching history events and updates ::token in model accordingly.\n  If ::token changes in model (e.g. by toggling action in debugger), then current url is replaced using new token.\n\n  Sends [::on-enter token] signal to app after handling token change event initiated from browser (e.g. on clicking Back button).\n  So using HistoryProtocol's replace-token/push-token would not trigger this signal.\n  You can still force sending this signal by passing {:browser-event? true} event-data to these functions."}, :name middleware.history/add, :variadic false, :file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :end-column 10, :method-params ([spec history]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 147, :end-line 147, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec history])), :doc "Applies middleware which allows app model always be in sync with current history.\n\n  After start it begins catching history events and updates ::token in model accordingly.\n  If ::token changes in model (e.g. by toggling action in debugger), then current url is replaced using new token.\n\n  Sends [::on-enter token] signal to app after handling token change event initiated from browser (e.g. on clicking Back button).\n  So using HistoryProtocol's replace-token/push-token would not trigger this signal.\n  You can still force sending this signal by passing {:browser-event? true} event-data to these functions."}, token->href {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :line 26, :column 4, :end-line 26, :end-column 15, :protocol middleware.history/HistoryProtocol, :doc "Returns the href for the specified token to be used in HTML links.", :arglists (quote ([this token]))}, :protocol middleware.history/HistoryProtocol, :name middleware.history/token->href, :variadic false, :file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :end-column 15, :method-params ([this token]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 26, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this token])), :doc "Returns the href for the specified token to be used in HTML links."}, replace-token {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :line 19, :column 4, :end-line 19, :end-column 17, :protocol middleware.history/HistoryProtocol, :doc "Replace token and fire an event with additional data passed (data is nil if not specified);\n                 do nothing if current token is already equal to the specified one.", :arglists (quote ([this token] [this token event-data])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([this token] [this token event-data]), :arglists ([this token] [this token event-data]), :arglists-meta (nil nil)}}, :protocol middleware.history/HistoryProtocol, :name middleware.history/replace-token, :variadic false, :file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([this token] [this token event-data]), :arglists ([this token] [this token event-data]), :arglists-meta (nil nil)}, :method-params ([this token] [this token event-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 19, :max-fixed-arity 3, :fn-var true, :arglists ([this token] [this token event-data]), :doc "Replace token and fire an event with additional data passed (data is nil if not specified);\n                 do nothing if current token is already equal to the specified one."}, -wrap-control {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :line 95, :column 7, :end-line 95, :end-column 20, :arglists (quote ([app-control history]))}, :name middleware.history/-wrap-control, :variadic false, :file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :end-column 20, :method-params ([app-control history]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 2, :fn-var true, :arglists (quote ([app-control history]))}, -History {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable middleware.history/HistoryProtocol cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name middleware.history/-History, :file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :end-column 20, :type true, :column 12, :internal-ctor true, :line 30, :record true, :end-line 30, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, new-history {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :line 75, :column 7, :end-line 75, :end-column 18, :arglists (quote ([])), :doc "For history management using pushState. Supported browsers: http://caniuse.com/#search=pushstate"}, :name middleware.history/new-history, :variadic false, :file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "For history management using pushState. Supported browsers: http://caniuse.com/#search=pushstate"}, -pure-click? {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :line 163, :column 7, :end-line 163, :end-column 19, :arglists (quote ([e])), :doc "Returns false if the user did a middle-click, right-click, or used a modifier"}, :name middleware.history/-pure-click?, :variadic false, :file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :end-column 19, :method-params ([e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 163, :end-line 163, :max-fixed-arity 1, :fn-var true, :arglists (quote ([e])), :doc "Returns false if the user did a middle-click, right-click, or used a modifier"}, ->-History {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :line 30, :column 12, :end-line 30, :end-column 20, :internal-ctor true, :factory :positional, :arglists (quote ([-goog-history]))}, :name middleware.history/->-History, :variadic false, :file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :end-column 20, :method-params ([-goog-history]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([-goog-history]))}, HistoryProtocol {:meta {:file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :line 11, :column 14, :end-line 11, :end-column 29, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {listen [[this callback]], replace-token [[this token] [this token event-data]], push-token [[this token] [this token event-data]], token [[this]], token->href [[this token]]}}}, :protocol-symbol true, :name middleware.history/HistoryProtocol, :file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :end-column 29, :column 1, :line 11, :protocol-info {:methods {listen [[this callback]], replace-token [[this token] [this token event-data]], push-token [[this token] [this token event-data]], token [[this]], token->href [[this token]]}}, :info nil, :end-line 11, :impls #{middleware.history/-History}, :doc nil, :jsdoc ("@interface")}, push-token {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :line 22, :column 4, :end-line 22, :end-column 14, :protocol middleware.history/HistoryProtocol, :doc "Push token and fire an event with additional data passed (data is nil if not specified);\n              do nothing if current token is already equal to the specified one.", :arglists (quote ([this token] [this token event-data])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([this token] [this token event-data]), :arglists ([this token] [this token event-data]), :arglists-meta (nil nil)}}, :protocol middleware.history/HistoryProtocol, :name middleware.history/push-token, :variadic false, :file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([this token] [this token event-data]), :arglists ([this token] [this token event-data]), :arglists-meta (nil nil)}, :method-params ([this token] [this token event-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 22, :max-fixed-arity 3, :fn-var true, :arglists ([this token] [this token event-data]), :doc "Push token and fire an event with additional data passed (data is nil if not specified);\n              do nothing if current token is already equal to the specified one."}, new-legacy-hash-history {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :line 60, :column 7, :end-line 60, :end-column 30, :arglists (quote ([])), :doc "For history management using hashes. Should work in Opera Mini."}, :name middleware.history/new-legacy-hash-history, :variadic false, :file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :end-column 30, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "For history management using hashes. Should work in Opera Mini."}, token {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :line 25, :column 4, :end-line 25, :end-column 9, :protocol middleware.history/HistoryProtocol, :doc "Return current token.", :arglists (quote ([this]))}, :protocol middleware.history/HistoryProtocol, :name middleware.history/token, :variadic false, :file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :end-column 9, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Return current token."}, -wrap-initial-model {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :line 89, :column 7, :end-line 89, :end-column 26, :arglists (quote ([app-initial-model]))}, :name middleware.history/-wrap-initial-model, :variadic false, :file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :end-column 26, :method-params ([app-initial-model]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 1, :fn-var true, :arglists (quote ([app-initial-model]))}, listen {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :line 12, :column 4, :end-line 12, :end-column 10, :protocol middleware.history/HistoryProtocol, :doc "Starts calling back on history events.\n          Callback function signature: [token browser-event? event-data], where:\n            token - new token\n            browser-event? - true if event was initiated by action in browser, e.g. clicking Back button\n            event-data - data which was passed from replace-token/push-token\n          Returns a function which stops listening.", :arglists (quote ([this callback]))}, :protocol middleware.history/HistoryProtocol, :name middleware.history/listen, :variadic false, :file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :end-column 10, :method-params ([this callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 12, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this callback])), :doc "Starts calling back on history events.\n          Callback function signature: [token browser-event? event-data], where:\n            token - new token\n            browser-event? - true if event was initiated by action in browser, e.g. clicking Back button\n            event-data - data which was passed from replace-token/push-token\n          Returns a function which stops listening."}, -on-click {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :line 172, :column 7, :end-line 172, :end-column 16, :arglists (quote ([e history token replace?]))}, :name middleware.history/-on-click, :variadic false, :file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :end-column 16, :method-params ([e history token replace?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 172, :end-line 172, :max-fixed-arity 4, :fn-var true, :arglists (quote ([e history token replace?]))}, link {:protocol-inline nil, :meta {:file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :line 180, :column 7, :end-line 180, :end-column 11, :arglists (quote ([history token {:keys [replace?], :as attrs} & body])), :doc "Link component which changes current URL without sending request to server.\n  Will replace current token instead of pushing if :replace? attribute is true.\n\n  If history middleware is added then clicking the link will produce :on-enter signal.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(history token {:keys [replace?], :as attrs} body)], :arglists ([history token {:keys [replace?], :as attrs} & body]), :arglists-meta (nil)}}, :name middleware.history/link, :variadic true, :file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(history token {:keys [replace?], :as attrs} body)], :arglists ([history token {:keys [replace?], :as attrs} & body]), :arglists-meta (nil)}, :method-params [(history token {:keys [replace?], :as attrs} body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 180, :end-line 180, :max-fixed-arity 3, :fn-var true, :arglists ([history token {:keys [replace?], :as attrs} & body]), :doc "Link component which changes current URL without sending request to server.\n  Will replace current token instead of pushing if :replace? attribute is true.\n\n  If history middleware is added then clicking the link will produce :on-enter signal."}, *-history-event-data* {:name middleware.history/*-history-event-data*, :file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :line 29, :column 1, :end-line 29, :end-column 37, :dynamic true, :meta {:file "/Users/yuri/Dropbox/dev/reagent-mvsa/examples/_common/middleware/history.cljs", :line 29, :column 16, :end-line 29, :end-column 37, :dynamic true}}}, :require-macros {cljs.core.match cljs.core.match}, :cljs.analyzer/constants {:seen #{:browser-event? -goog-history :middleware.history/token-watcher :else :initial-model :replace? :on-click :middleware.history/on-enter :token :middleware.history/set-token :on-stop :clojure.core.match/not-found :control :event-data :-goog-history :middleware.history/token :reconcile :middleware.history/on-history-event :href :a :on-start}, :order [:-goog-history -goog-history :middleware.history/token :else :middleware.history/on-history-event :browser-event? :clojure.core.match/not-found :token :event-data :middleware.history/set-token :middleware.history/on-enter :on-stop :on-start :middleware.history/token-watcher :initial-model :control :reconcile :replace? :a :href :on-click]}, :doc nil}