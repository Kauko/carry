;; Analyzed by ClojureScript 1.7.170
{:use-macros {reaction reagent.ratom}, :excludes #{}, :name mvsa.core, :imports nil, :requires {r reagent.core, reagent.core reagent.core}, :uses nil, :defs {app {:protocol-inline nil, :meta {:file "C:\\Users\\Yuri\\Dropbox\\dev\\reagent-mvsa\\src\\mvsa\\core.cljs", :line 6, :column 7, :end-line 6, :end-column 10, :arglists (quote ([{:keys [initial-model control reconcile on-start on-stop], :as _spec}])), :doc "Constructs an app from a spec.\n\n  Spec is a map with keys:\n  :initial-model - initial model value, must be a map\n  :control - function of args: [model-value signal dispatch-action];\n  it performs side effects, can dispatch actions using dispatch-action (which returns the updated model value)\n  :reconcile - pure function of args: [model-value action];\n  given an action it must return the new model value\n  :on-start - function of args: [model-reaction dispatch-signal]; will be called on starting the app\n  :on-stop - function of args: [model-reaction dispatch-signal]; will be called on stopping the app\n\n  App is a map with keys:\n  :model - a readonly ratom (or, in Reagent terms, a reaction which returns model value)\n  :dispatch-signal - function with a single arg: a signal to be sent to an app; returns nil\n  :start - argless function for bootstrapping an app, e.g. app can start listening to browser history here\n  :stop - argless function for shutting an app down, e.g. app can stop listening to browser events here\n  :-model - model ratom (exposed for debugging only)\n  :-dispatch-action - function with which dispatches an action (exposed for debugging only); returns updated model value\n\n  Data flow:\n  -dispatch-signal-> (control) -dispatch-action-> (reconcile) -update-> model"}, :name mvsa.core/app, :variadic false, :file "C:\\Users\\Yuri\\Dropbox\\dev\\reagent-mvsa\\src\\mvsa\\core.cljs", :end-column 10, :method-params ([p__21431]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [initial-model control reconcile on-start on-stop], :as _spec}])), :doc "Constructs an app from a spec.\n\n  Spec is a map with keys:\n  :initial-model - initial model value, must be a map\n  :control - function of args: [model-value signal dispatch-action];\n  it performs side effects, can dispatch actions using dispatch-action (which returns the updated model value)\n  :reconcile - pure function of args: [model-value action];\n  given an action it must return the new model value\n  :on-start - function of args: [model-reaction dispatch-signal]; will be called on starting the app\n  :on-stop - function of args: [model-reaction dispatch-signal]; will be called on stopping the app\n\n  App is a map with keys:\n  :model - a readonly ratom (or, in Reagent terms, a reaction which returns model value)\n  :dispatch-signal - function with a single arg: a signal to be sent to an app; returns nil\n  :start - argless function for bootstrapping an app, e.g. app can start listening to browser history here\n  :stop - argless function for shutting an app down, e.g. app can stop listening to browser events here\n  :-model - model ratom (exposed for debugging only)\n  :-dispatch-action - function with which dispatches an action (exposed for debugging only); returns updated model value\n\n  Data flow:\n  -dispatch-signal-> (control) -dispatch-action-> (reconcile) -update-> model"}, connect-ui {:protocol-inline nil, :meta {:file "C:\\Users\\Yuri\\Dropbox\\dev\\reagent-mvsa\\src\\mvsa\\core.cljs", :line 43, :column 7, :end-line 43, :end-column 17, :arglists (quote ([{:keys [model dispatch-signal], :as _app} view-model view])), :doc "Arguments:\n  app - the app for which UI should be created\n  view-model - function which, given a model ratom, returns Reagent reactions; inspired by re-frame\n  subscriptions, see: https://github.com/Day8/re-frame#subscribe; returned value will be passed to a view:\n  view - Reagent compoment function with args: [view-model-return-value dispatch-signal]\n\n  Note that view-model function will be called only once.\n\n  Returns a pair of: view-model value (mostly for testing/debugging) and argless component to be rendered by Reagent."}, :name mvsa.core/connect-ui, :variadic false, :file "C:\\Users\\Yuri\\Dropbox\\dev\\reagent-mvsa\\src\\mvsa\\core.cljs", :end-column 17, :method-params ([p__21436 view-model view]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{:keys [model dispatch-signal], :as _app} view-model view])), :doc "Arguments:\n  app - the app for which UI should be created\n  view-model - function which, given a model ratom, returns Reagent reactions; inspired by re-frame\n  subscriptions, see: https://github.com/Day8/re-frame#subscribe; returned value will be passed to a view:\n  view - Reagent compoment function with args: [view-model-return-value dispatch-signal]\n\n  Note that view-model function will be called only once.\n\n  Returns a pair of: view-model value (mostly for testing/debugging) and argless component to be rendered by Reagent."}}, :require-macros {reagent.ratom reagent.ratom}, :cljs.analyzer/constants {:seen #{reconcile fn? view model on-start :initial-model map? :start initial-model :dispatch-signal :-model :stop :on-stop :control dispatch-signal :reconcile on-stop control :-dispatch-action view-model :model :on-start}, :order [:initial-model :control :reconcile :on-start :on-stop map? initial-model fn? control reconcile on-start on-stop :model :dispatch-signal :start :stop :-model :-dispatch-action model dispatch-signal view-model view]}, :doc nil}