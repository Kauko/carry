;; Analyzed by ClojureScript 1.7.170
{:use-macros {match cljs.core.match, run! reagent.ratom}, :excludes #{}, :name app.middleware.persistence, :imports nil, :requires {helpers mvsa.helpers, mvsa.helpers mvsa.helpers, cljs.core.match cljs.core.match}, :uses nil, :defs {-wrap-control {:protocol-inline nil, :meta {:file "C:\\Users\\Yuri\\Dropbox\\dev\\reagent-mvsa\\examples\\todomvc\\src\\app\\middleware\\persistence.cljs", :line 6, :column 7, :end-line 6, :end-column 20, :arglists (quote ([app-control key]))}, :name app.middleware.persistence/-wrap-control, :variadic false, :file "src\\app\\middleware\\persistence.cljs", :end-column 20, :method-params ([app-control key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 2, :fn-var true, :arglists (quote ([app-control key]))}, -wrap-reconcile {:protocol-inline nil, :meta {:file "C:\\Users\\Yuri\\Dropbox\\dev\\reagent-mvsa\\examples\\todomvc\\src\\app\\middleware\\persistence.cljs", :line 17, :column 7, :end-line 17, :end-column 22, :arglists (quote ([app-reconcile key blacklist]))}, :name app.middleware.persistence/-wrap-reconcile, :variadic false, :file "src\\app\\middleware\\persistence.cljs", :end-column 22, :method-params ([app-reconcile key blacklist]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 3, :fn-var true, :arglists (quote ([app-reconcile key blacklist]))}, -save {:protocol-inline nil, :meta {:file "C:\\Users\\Yuri\\Dropbox\\dev\\reagent-mvsa\\examples\\todomvc\\src\\app\\middleware\\persistence.cljs", :line 29, :column 7, :end-line 29, :end-column 12, :arglists (quote ([storage key blacklist model]))}, :name app.middleware.persistence/-save, :variadic false, :file "src\\app\\middleware\\persistence.cljs", :end-column 12, :method-params ([storage key blacklist model]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 4, :fn-var true, :arglists (quote ([storage key blacklist model]))}, add {:protocol-inline nil, :meta {:file "C:\\Users\\Yuri\\Dropbox\\dev\\reagent-mvsa\\examples\\todomvc\\src\\app\\middleware\\persistence.cljs", :line 34, :column 7, :end-line 34, :end-column 10, :arglists (quote ([spec storage key] [spec storage key {:keys [blacklist load-wrapper], :or {blacklist #{}, load-wrapper identity}, :as _options}])), :doc "On start middleware will load the model from storage.\n  Saves model into storage on every change.\n  Several middlewares can safely wrap the same spec as long as they use different storage keys.\n\n  Storage is expected to be a transient map.\n  If this middleware is applioed to spec several times then all keys must differ; otherwise, behavior is undefined.\n  Optional :blacklist set should contain model keys which will not be saved and loaded.\n  Optional :load-wrapper allows decorating model update function (e.g. it's possible to cancel loading based on loaded data).", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([spec storage key] [spec storage key {:keys [blacklist load-wrapper], :or {blacklist #{}, load-wrapper identity}, :as _options}]), :arglists ([spec storage key] [spec storage key {:keys [blacklist load-wrapper], :or {blacklist #{}, load-wrapper identity}, :as _options}]), :arglists-meta (nil nil)}}, :name app.middleware.persistence/add, :variadic false, :file "src\\app\\middleware\\persistence.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([spec storage key] [spec storage key {:keys [blacklist load-wrapper], :or {blacklist #{}, load-wrapper identity}, :as _options}]), :arglists ([spec storage key] [spec storage key {:keys [blacklist load-wrapper], :or {blacklist #{}, load-wrapper identity}, :as _options}]), :arglists-meta (nil nil)}, :method-params ([spec storage key] [spec storage key {:keys [blacklist load-wrapper], :or {blacklist #{}, load-wrapper identity}, :as _options}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 4, :fn-var true, :arglists ([spec storage key] [spec storage key {:keys [blacklist load-wrapper], :or {blacklist #{}, load-wrapper identity}, :as _options}]), :doc "On start middleware will load the model from storage.\n  Saves model into storage on every change.\n  Several middlewares can safely wrap the same spec as long as they use different storage keys.\n\n  Storage is expected to be a transient map.\n  If this middleware is applioed to spec several times then all keys must differ; otherwise, behavior is undefined.\n  Optional :blacklist set should contain model keys which will not be saved and loaded.\n  Optional :load-wrapper allows decorating model update function (e.g. it's possible to cancel loading based on loaded data)."}}, :require-macros {reagent.ratom reagent.ratom, cljs.core.match cljs.core.match}, :cljs.analyzer/constants {:seen #{:app.middleware.persistence/-load-from-storage :else set? :app.middleware.persistence/-on-load-from-storage :load-wrapper :blacklist :not-found :control :auto-run blacklist :reconcile :on-start}, :order [:else :app.middleware.persistence/-on-load-from-storage :app.middleware.persistence/-load-from-storage :blacklist :load-wrapper set? blacklist :control :reconcile :on-start :not-found :auto-run]}, :doc nil}