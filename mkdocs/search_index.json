{
    "docs": [
        {
            "location": "/", 
            "text": "Intro\n\n\nWIP.", 
            "title": "Home"
        }, 
        {
            "location": "/#intro", 
            "text": "WIP.", 
            "title": "Intro"
        }, 
        {
            "location": "/examples/", 
            "text": "All source code can be found in \nthe Github repository\n.\n\n\nAll apps support hot reloading and REPL debugging via \nFigwheel\n.\n\n\nTodoMVC\n\n\nSource code\n\n\nDemo\n\n\nSee \ntodomvc.com\n.\n\n\nFeatures:\n\n\n\n\nextensive use of middleware pattern\n\n\nrouting\n\n\nlocal storage persistence\n\n\ntime travel debugger\n\n\nlogging to console\n\n\nmodel validation using \nSchema\n\n\nuses \nSpecter\n for model updates\n\n\n\n\nCounter\n\n\nSource code\n\n\nDemo\n\n\nThe most trivial example.\n\n\nCounter with DataScript\n\n\nSource code\n\n\nDemo\n\n\nSimplest example of using \nDataScript\n in-memory database for a model.\n\n\nShopping Cart\n\n\nSource code\n\n\nDemo\n\n\nMore advanced example of using \nDataScript\n.\nInspired by \nflux-comparison\n problem.\n\n\nFriend List\n\n\nSource code\n\n\nDemo\n\n\nInspired by this \nproblem\n about dynamic search input.\nDemonstrates how to dispatch new signals from app controller and also features:\n\n\n\n\nrouting\n\n\ntime travel debugger\n\n\nlogging to console\n\n\n\n\nElm-ish Counter List\n\n\nSource code\n\n\nDemo\n\n\nThe proof-of-concept example of applying \nElm-ish architecture\n\nfor reusing existing reagent-mvsa apps when building a bigger app.\nIn this project \ncounter app\n instances are created and removed dynamically.\nIt's a debatable design pattern because of the resulting code complexity, so use it with caution.", 
            "title": "Examples"
        }, 
        {
            "location": "/examples/#todomvc", 
            "text": "Source code  Demo  See  todomvc.com .  Features:   extensive use of middleware pattern  routing  local storage persistence  time travel debugger  logging to console  model validation using  Schema  uses  Specter  for model updates", 
            "title": "TodoMVC"
        }, 
        {
            "location": "/examples/#counter", 
            "text": "Source code  Demo  The most trivial example.", 
            "title": "Counter"
        }, 
        {
            "location": "/examples/#counter-with-datascript", 
            "text": "Source code  Demo  Simplest example of using  DataScript  in-memory database for a model.", 
            "title": "Counter with DataScript"
        }, 
        {
            "location": "/examples/#shopping-cart", 
            "text": "Source code  Demo  More advanced example of using  DataScript .\nInspired by  flux-comparison  problem.", 
            "title": "Shopping Cart"
        }, 
        {
            "location": "/examples/#friend-list", 
            "text": "Source code  Demo  Inspired by this  problem  about dynamic search input.\nDemonstrates how to dispatch new signals from app controller and also features:   routing  time travel debugger  logging to console", 
            "title": "Friend List"
        }, 
        {
            "location": "/examples/#elm-ish-counter-list", 
            "text": "Source code  Demo  The proof-of-concept example of applying  Elm-ish architecture \nfor reusing existing reagent-mvsa apps when building a bigger app.\nIn this project  counter app  instances are created and removed dynamically.\nIt's a debatable design pattern because of the resulting code complexity, so use it with caution.", 
            "title": "Elm-ish Counter List"
        }, 
        {
            "location": "/dev-guide/", 
            "text": "Documentation\n\n\nProject uses \nMkDocs\n to generate documentation static site.\n\n\nServe site without examples locally with automatic build: \nmkdocs serve\n\n\nBuild site without examples into site folder: \nmkdocs build --clean\n\n\nBuild site with examples (requires \nPyInvoke\n): \ninv site\n\n\nDeploying\n\n\nDeploy to Clojars: \nlein deploy clojars\n\n\nDeploy site to gh-pages branch: \nghp-import -p site", 
            "title": "Developer Guide"
        }, 
        {
            "location": "/dev-guide/#documentation", 
            "text": "Project uses  MkDocs  to generate documentation static site.  Serve site without examples locally with automatic build:  mkdocs serve  Build site without examples into site folder:  mkdocs build --clean  Build site with examples (requires  PyInvoke ):  inv site", 
            "title": "Documentation"
        }, 
        {
            "location": "/dev-guide/#deploying", 
            "text": "Deploy to Clojars:  lein deploy clojars  Deploy site to gh-pages branch:  ghp-import -p site", 
            "title": "Deploying"
        }
    ]
}