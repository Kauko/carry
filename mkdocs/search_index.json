{
    "docs": [
        {
            "location": "/", 
            "text": "Intro\n\n\nWIP.", 
            "title": "Home"
        }, 
        {
            "location": "/#intro", 
            "text": "WIP.", 
            "title": "Intro"
        }, 
        {
            "location": "/examples/", 
            "text": "All source code can be found in \nthe Github repository\n.\n\n\nAll apps support hot reloading and REPL debugging via \nFigwheel\n.\n\n\nCounter\n\n\nSource code\n\n\nDemo\n\n\nThe most trivial example.\n\n\nFriend List\n\n\nSource code\n\n\nDemo\n\n\nInspired by this \nproblem\n about dynamic search input.\nDemonstrates how to dispatch new signals from app controller and also features:\n\n\n\n\nbasic routing\n\n\nmodel validation using \nSchema\n\n\ntime travel debugger\n\n\nlogging to console\n\n\nunit tests\n\n\n\n\nTodoMVC\n\n\nSource code\n\n\nDemo\n\n\nSee \ntodomvc.com\n.\n\n\nFeatures:\n\n\n\n\nrouting using \nSilk\n\n\nlocal storage persistence\n\n\ntime travel debugger\n\n\nlogging to console\n\n\nmodel validation using \nSchema\n\n\nuses \nSpecter\n for model updates\n\n\n\n\nCounter with DataScript\n\n\nSource code\n\n\nDemo\n\n\nSimplest example of using \nDataScript\n in-memory database for a model.\n\n\nShopping Cart\n\n\nSource code\n\n\nDemo\n\n\nMore advanced example of using \nDataScript\n.\nInspired by \nflux-comparison\n problem.\n\n\nElm-ish Architecture Examples\n\n\nThe proof-of-concept examples of applying \nElm-ish architecture\n\nfor reusing existing Carry apps when building a bigger app.\nIt's a debatable design pattern because of the resulting code complexity, so use it with caution.\n\n\nSubapps\n\n\nSource code\n\n\nDemo\n\n\nIn this project \ncounter app\n and \nfriend list app\n instances are \"statically\" added to the app spec.\nSeveral helper methods are extracted to make it easy to include any subapp at the time of app instantiation.\n\n\nCounter List\n\n\nSource code\n\n\nDemo\n\n\nIn this example \ncounter app\n instances are created and removed dynamically after app is started.", 
            "title": "Examples"
        }, 
        {
            "location": "/examples/#counter", 
            "text": "Source code  Demo  The most trivial example.", 
            "title": "Counter"
        }, 
        {
            "location": "/examples/#friend-list", 
            "text": "Source code  Demo  Inspired by this  problem  about dynamic search input.\nDemonstrates how to dispatch new signals from app controller and also features:   basic routing  model validation using  Schema  time travel debugger  logging to console  unit tests", 
            "title": "Friend List"
        }, 
        {
            "location": "/examples/#todomvc", 
            "text": "Source code  Demo  See  todomvc.com .  Features:   routing using  Silk  local storage persistence  time travel debugger  logging to console  model validation using  Schema  uses  Specter  for model updates", 
            "title": "TodoMVC"
        }, 
        {
            "location": "/examples/#counter-with-datascript", 
            "text": "Source code  Demo  Simplest example of using  DataScript  in-memory database for a model.", 
            "title": "Counter with DataScript"
        }, 
        {
            "location": "/examples/#shopping-cart", 
            "text": "Source code  Demo  More advanced example of using  DataScript .\nInspired by  flux-comparison  problem.", 
            "title": "Shopping Cart"
        }, 
        {
            "location": "/examples/#elm-ish-architecture-examples", 
            "text": "The proof-of-concept examples of applying  Elm-ish architecture \nfor reusing existing Carry apps when building a bigger app.\nIt's a debatable design pattern because of the resulting code complexity, so use it with caution.", 
            "title": "Elm-ish Architecture Examples"
        }, 
        {
            "location": "/examples/#subapps", 
            "text": "Source code  Demo  In this project  counter app  and  friend list app  instances are \"statically\" added to the app spec.\nSeveral helper methods are extracted to make it easy to include any subapp at the time of app instantiation.", 
            "title": "Subapps"
        }, 
        {
            "location": "/examples/#counter-list", 
            "text": "Source code  Demo  In this example  counter app  instances are created and removed dynamically after app is started.", 
            "title": "Counter List"
        }, 
        {
            "location": "/dev-guide/", 
            "text": "Documentation\n\n\nProject uses \nMkDocs\n with \nCinder\n theme and \nPlantUML\n to generate documentation static site.\n\n\nServe site without examples locally with automatic build: \nmkdocs serve\n\n\nBuild site without examples into site folder: \nmkdocs build --clean\n\n\nBuild site with graphs and examples (requires \nPyInvoke\n): \ninv site\n\n\nDeploying\n\n\nDeploy to Clojars: \nlein deploy clojars\n\n\nDeploy site to gh-pages branch: \nghp-import -p site", 
            "title": "Developer Guide"
        }, 
        {
            "location": "/dev-guide/#documentation", 
            "text": "Project uses  MkDocs  with  Cinder  theme and  PlantUML  to generate documentation static site.  Serve site without examples locally with automatic build:  mkdocs serve  Build site without examples into site folder:  mkdocs build --clean  Build site with graphs and examples (requires  PyInvoke ):  inv site", 
            "title": "Documentation"
        }, 
        {
            "location": "/dev-guide/#deploying", 
            "text": "Deploy to Clojars:  lein deploy clojars  Deploy site to gh-pages branch:  ghp-import -p site", 
            "title": "Deploying"
        }
    ]
}